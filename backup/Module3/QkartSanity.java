/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package QKART_SANITY_LOGIN.Module1;

import net.bytebuddy.asm.Advice.Exit;
import java.io.File;
import java.net.MalformedURLException;
import java.net.URL;
import java.time.Duration;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.concurrent.TimeUnit;
import org.apache.commons.io.FileUtils;
import org.checkerframework.checker.units.qual.s;
import org.openqa.selenium.By;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.WindowType;
import org.openqa.selenium.remote.BrowserType;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.FluentWait;
import org.openqa.selenium.support.ui.WebDriverWait;

public class QkartSanity {

    public static String lastGeneratedUserName;

    public static RemoteWebDriver createDriver() throws MalformedURLException {
        // Launch Browser using Zalenium
        final DesiredCapabilities capabilities = new DesiredCapabilities();
        capabilities.setBrowserName(BrowserType.CHROME);
        RemoteWebDriver driver = new RemoteWebDriver(new URL("http://localhost:8082/wd/hub"), capabilities);

        return driver;
    }

    public static void logStatus(String type, String message, String status) {

        System.out.println(String.format("%s |  %s  |  %s | %s", String.valueOf(java.time.LocalDateTime.now()), type,
                message, status));
    }

    public static void takeScreenshot(WebDriver driver, String screenshotType, String description) {
        // TODO: CRIO_TASK_MODULE_SYNCHRONISATION - Implement method using below steps
        /*
         * 1. Check if the folder "/screenshots" exists, create if it doesn't
         * 2. Generate a unique string using the timestamp
         * 3. Capture screenshot
         * 4. Save the screenshot inside the "/screenshots" folder using the following
         * naming convention: screenshot_<Timestamp>_<ScreenshotType>_<Description>.png
         * eg: screenshot_2022-03-05T06:59:46.015489_StartTestcase_Testcase01.png
         */
        try{
            File theDir = new File("/screenshots");
            if (!theDir.exists()){
                theDir.mkdir();
            }

            File srcFile = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);
            String timeStamp = String.valueOf(java.time.LocalDateTime.now());
            String fileName = "app/screnshot/"+ "screenshot_"+ timeStamp + "_"+ screenshotType + "_"+ description + ".png";
            File destFile = new File(fileName);

            FileUtils.copyFile(srcFile, destFile);
        } catch(Exception e){
            e.printStackTrace();
        }
    }

    /*
     * Testcase01: Verify the functionality of Login button on the Home page
     */
    public static Boolean TestCase01(RemoteWebDriver driver) throws InterruptedException {
        Boolean status;
        logStatus("Start TestCase", "Test Case 1: Verify User Registration", "DONE");
        takeScreenshot(driver, "Start TestCase", "Test Case 1: Verify User Registration");

        // Visit the Registration page and register a new user
        Register registration = new Register(driver);
        registration.navigateToRegisterPage();
        status = registration.registerUser("testUser", "abc@123", true);
        if (!status) {
            logStatus("TestCase 1", "Test Case Pass. User Registration Pass", "FAIL");
            logStatus("End TestCase", "Test Case 1: Verify user Registration : ", status ? "PASS" : "FAIL");
            takeScreenshot(driver, "End TestCase", "Test Case 1: Verify user Registration : Fail");

            // Return False as the test case Fails
            return false;
        } else {
            logStatus("TestCase 1", "Test Case Pass. User Registration Pass", "PASS");
        }

        // Save the last generated username
        lastGeneratedUserName = registration.lastGeneratedUsername;

        // Visit the login page and login with the previuosly registered user
        Login login = new Login(driver);
        login.navigateToLoginPage();
        status = login.PerformLogin(lastGeneratedUserName, "abc@123");
        logStatus("Test Step", "User Perform Login: ", status ? "PASS" : "FAIL");
        if (!status) {
            logStatus("End TestCase", "Test Case 1: Verify user Registration : ", status ? "PASS" : "FAIL");
            return false;
        }

        // Visit the home page and log out the logged in user
        Home home = new Home(driver);
        status = home.PerformLogout();
        logStatus("End TestCase", "Test Case 1: Verify user Registration : ", status ? "PASS" : "FAIL");
        takeScreenshot(driver, "End TestCase", "Test Case 1: Verify user Registration : "+ status);
        return status;
    }

    /*
     * Verify that an existing user is not allowed to re-register on QKart
     */
    public static Boolean TestCase02(RemoteWebDriver driver) throws InterruptedException {
        Boolean status;
        logStatus("Start Testcase", "Test Case 2: Verify User Registration with an existing username ", "DONE");
        takeScreenshot(driver, "Start Testcase", "Test Case 2: Verify User Registration with an existing username");
        // Visit the Registration page and register a new user
        Register registration = new Register(driver);
        registration.navigateToRegisterPage();
        status = registration.registerUser("testUser", "abc@123", true);
        logStatus("Test Step", "User Registration : ", status ? "PASS" : "FAIL");
        if (!status) {
            logStatus("End TestCase", "Test Case 2: Verify user Registration : ", status ? "PASS" : "FAIL");
            takeScreenshot(driver, "End TestCase", "Test Case 2: Verify user Registration : Fail");
            return false;

        }

        // Save the last generated username
        lastGeneratedUserName = registration.lastGeneratedUsername;

        // Visit the Registration page and try to register using the previously
        // registered user's credentials
        registration.navigateToRegisterPage();
        status = registration.registerUser(lastGeneratedUserName, "abc@123", false);

        // If status is true, then registration succeeded, else registration has
        // failed. In this case registration failure means Success
        if (!status){
            logStatus("End TestCase", "Test Case 2: Verify User Registration with an existing username is not possible", "PASS");
            takeScreenshot(driver, "End TestCase", "Test Case 2: Verify User Registration with an existing username is not possible : Pass");
            return true;
        } else {
            logStatus("End TestCase", "Test Case 2: Verify User Registration with an existing username is not possible", "Fail");
            takeScreenshot(driver, "End TestCase", "Test Case 2: Verify User Registration with an existing username is not possible : Fail");
            return false;
        }    
    }

    /*
     * Verify the functinality of the search text box
     */
    public static Boolean TestCase03(RemoteWebDriver driver) throws InterruptedException {
        logStatus("Start test case", "TestCase 3 : Verify functionality of search box ", "DONE");
        takeScreenshot(driver, "Start test case", "TestCase 3 : Verify functionality of search box");
        boolean status;
        try {
             // Visit the home page
            Home homePage = new Home(driver);
            homePage.navigateToHome();

            // SLEEP_STMT_01 : Wait for Page to Load
            //Thread.sleep(5000);

            // Search for the "yonex" product
            status = homePage.searchForProduct("yonex");

            //System.out.println("status after searchForProduct : "+ status);
            if (!status) {
                logStatus("End Test Case", "TestCase 3: Test Case Failure. Unable to search for given product", "FAIL");
                takeScreenshot(driver, "End Test Case", "TestCase 3: Test Case Failure. Unable to search for given product : Fail");
                return false;
            }

            // Fetch the search results
            List<WebElement> searchResults = homePage.getSearchResults();

            //System.out.println("searchResults size : "+ searchResults.size());

            // Verify the search results are available
            if (searchResults.size() == 0) {
                logStatus("End Test Case", "TestCase 3: Test Case Failure. There were no results for the given search string", "FAIL");
                takeScreenshot(driver, "End Test Case", "TestCase 3: Test Case Failure. There were no results for the given search string : Fail");
                return false;
            }

            for (WebElement webElement : searchResults) {
                // Create a SearchResult object from the parent element
                SearchResult resultelement = new SearchResult(webElement);

                // Verify that all results contain the searched text
                String elementText = resultelement.getTitleofResult();
                if (!elementText.toUpperCase().contains("YONEX")) {
                    logStatus("TestCase 3", "Test Case Failure. Test Results contains un-expected values: " + elementText,
                            "FAIL");
                    takeScreenshot(driver, "TestCase 3", "Test Case Failure. Test Results contains un-expected values: " + elementText);
                    return false;
                }
            }

            logStatus("Step Success", "Successfully validated the search results ", "PASS");
            takeScreenshot(driver, "Step Success", "Successfully validated the search results");
            // SLEEP_STMT_02
            //Thread.sleep(2000);

            // Search for product
            status = homePage.searchForProduct("Gesundheit");
            if (!status) {
                logStatus("TestCase 3", "Test Case Failure. Unable to search for given product", "FAIL");
                takeScreenshot(driver, "TestCase 3", "Test Case Failure. Unable to search for given product");
                return false;
            }

            // Verify no search results are found
            searchResults = homePage.getSearchResults();
            if (searchResults.size() == 0) {
                if (homePage.isNoResultFound()) {
                    logStatus("Step Success", "Successfully validated that no products found message is displayed", "PASS");
                }
                logStatus("TestCase 3", "Test Case PASS. Verified that no search results were found for the given text",
                        "PASS");
                takeScreenshot(driver, "TestCase 3", "Test Case PASS. Verified that no search results were found for the given text");
            } else {
                logStatus("TestCase 3", "Test Case Fail. Expected: no results , actual: Results were available", "FAIL");
                takeScreenshot(driver, "TestCase 3", "Test Case Fail. Expected: no results , actual: Results were available");
                return false;
            }

            return true;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
       
    }

    /*
     * Verify the presence of size chart and check if the size chart content is as
     * expected
     */
    public static Boolean TestCase04(RemoteWebDriver driver) throws InterruptedException {
        logStatus("TestCase 4", "Start test case : Verify the presence of size Chart", "DONE");
        takeScreenshot(driver, "TestCase 4", "Start test case : Verify the presence of size Chart");
        boolean status = false;

        // Visit home page
        Home homePage = new Home(driver);
        homePage.navigateToHome();

        // SLEEP_STMT_03 : Wait for page to load
        //Thread.sleep(5000);

        // Search for product and get card content element of search results
        status = homePage.searchForProduct("Running Shoes");
        List<WebElement> searchResults = homePage.getSearchResults();

        // Create expected values
        List<String> expectedTableHeaders = Arrays.asList("Size", "UK/INDIA", "EU", "HEEL TO TOE");
        List<List<String>> expectedTableBody = Arrays.asList(Arrays.asList("6", "6", "40", "9.8"),
                Arrays.asList("7", "7", "41", "10.2"), Arrays.asList("8", "8", "42", "10.6"),
                Arrays.asList("9", "9", "43", "11"), Arrays.asList("10", "10", "44", "11.5"),
                Arrays.asList("11", "11", "45", "12.2"), Arrays.asList("12", "12", "46", "12.6"));

        // Verify size chart presence and content matching for each search result
        for (WebElement webElement : searchResults) {
            SearchResult result = new SearchResult(webElement);

            // Verify if the size chart exists for the search result
            if (result.verifySizeChartExists()) {
                logStatus("Step Success", "Successfully validated presence of Size Chart Link", "PASS");

                // Verify if size dropdown exists
                status = result.verifyExistenceofSizeDropdown(driver);
                logStatus("Step Success", "Validated presence of drop down", status ? "PASS" : "FAIL");

                // Open the size chart
                if (result.openSizechart(driver)) {
                    // Verify if the size chart contents matches the expected values
                    if (result.validateSizeChartContents(expectedTableHeaders, expectedTableBody, driver)) {
                        logStatus("Step Success", "Successfully validated contents of Size Chart Link", "PASS");
                        takeScreenshot(driver, "Step Success", "Successfully validated contents of Size Chart Link");
                    } else {
                        logStatus("Step Failure", "Failure while validating contents of Size Chart Link", "FAIL");
                        takeScreenshot(driver, "Step Failure", "Failure while validating contents of Size Chart Link");
                    }

                    // Close the size chart modal
                    status = result.closeSizeChart(driver);

                } else {
                    logStatus("TestCase 4", "Test Case Fail. Failure to open Size Chart", "FAIL");
                    takeScreenshot(driver, "TestCase 4", "Test Case Fail. Failure to open Size Chart");
                    return false;
                }

            } else {
                logStatus("TestCase 4", "Test Case Fail. Size Chart Link does not exist", "FAIL");
                takeScreenshot(driver, "TestCase 4", "Test Case Fail. Size Chart Link does not exist");
                return false;
            }
        }
        logStatus("TestCase 4", "Test Case PASS. Validated Size Chart Details", "PASS");
        takeScreenshot(driver, "TestCase 4", "Test Case PASS. Validated Size Chart Details");
        return status;
    }

    /*
     * Verify the complete flow of checking out and placing order for products is
     * working correctly
     */
    public static Boolean TestCase05(RemoteWebDriver driver) throws InterruptedException {
        Boolean status;
        logStatus("Start TestCase", "Test Case 5: Verify Happy Flow of buying products", "DONE");
        takeScreenshot(driver, "Start TestCase", "Test Case 5: Verify Happy Flow of buying products");

        // Go to the Register page
        Register registration = new Register(driver);
        registration.navigateToRegisterPage();

        // Register a new user
        status = registration.registerUser("testUser", "abc@123", true);
        if (!status) {
            logStatus("TestCase 5", "Test Case Failure. Happy Flow Test Failed", "FAIL");
            takeScreenshot(driver, "TestCase 5", "Test Case Failure. Happy Flow Test Failed");
        }

        // Save the username of the newly registered user
        lastGeneratedUserName = registration.lastGeneratedUsername;

        // Go to the login page
        Login login = new Login(driver);
        login.navigateToLoginPage();

        // Login with the newly registered user's credentials
        status = login.PerformLogin(lastGeneratedUserName, "abc@123");
        if (!status) {
            logStatus("Step Failure", "User Perform Login Failed", status ? "PASS" : "FAIL");
            logStatus("End TestCase", "Test Case 5: Happy Flow Test Failed : ", status ? "PASS" : "FAIL");
            takeScreenshot(driver, "End TestCase", "Test Case 5: Happy Flow Test Failed");
        }

        // Go to the home page
        Home homePage = new Home(driver);
        homePage.navigateToHome();

        // Find required products by searching and add them to the user's cart
        status = homePage.searchForProduct("Yonex");
        homePage.addProductToCart("YONEX Smash Badminton Racquet");
        status = homePage.searchForProduct("Tan");
        homePage.addProductToCart("Tan Leatherette Weekender Duffle");

        // Click on the checkout button
        homePage.clickCheckout();

        // Add a new address on the Checkout page and select it
        Checkout checkoutPage = new Checkout(driver);
        checkoutPage.addNewAddress("Addr line 1 addr Line 2 addr line 3");
        checkoutPage.selectAddress("Addr line 1 addr Line 2 addr line 3");

        // Place the order
        checkoutPage.placeOrder();
        // SLEEP_STMT_04: Wait for place order to succeed and navigate to Thanks page
        //Thread.sleep(3000);
        WebDriverWait wait = new WebDriverWait(driver, 10);
        wait.until(ExpectedConditions.urlContains("thanks"));

        // Check if placing order redirected to the Thansk page
        status = driver.getCurrentUrl().endsWith("/thanks");

        // Go to the home page
        homePage.navigateToHome();
        // SLEEP_STMT_05: Wait for page to load
        //Thread.sleep(3000);

        // Log out the user
        homePage.PerformLogout();

        logStatus("End TestCase", "Test Case 5: Happy Flow Test Completed : ", status ? "PASS" : "FAIL");
        takeScreenshot(driver, "End TestCase", "Test Case 5: Happy Flow Test Completed : Pass");
        return status;
    }

    /*
     * Verify the quantity of items in cart can be updated
     */
    public static Boolean TestCase06(RemoteWebDriver driver) throws InterruptedException {
        Boolean status;
        logStatus("Start TestCase", "Test Case 6: Verify that cart can be edited", "DONE");
        takeScreenshot(driver, "Start TestCase", "Test Case 6: Verify that cart can be edited");

        Home homePage = new Home(driver);
        Register registration = new Register(driver);
        Login login = new Login(driver);

        // TODO: CRIO_TASK_MODULE_TEST_AUTOMATION - TEST CASE 06: MILESTONE 5

        // TODO: Register a new user
        registration.navigateToRegisterPage();
        status = registration.registerUser("testUser", "abc@123", true);
        if (!status) {
            logStatus("TestCase 5", "Test Case Failure. Verify that cart can be edited Test Failed", "FAIL");
            takeScreenshot(driver, "TestCase 5", "Test Case Failure. Verify that cart can be edited Test Failed");
        }

        // TODO: Login using the newly registed user
         
         lastGeneratedUserName = registration.lastGeneratedUsername;
         login.navigateToLoginPage();

         // Login with the newly registered user's credentials
         status = login.PerformLogin(lastGeneratedUserName, "abc@123");
         if (!status) {
             logStatus("Step Failure", "User Perform Login Failed", status ? "PASS" : "FAIL");
             logStatus("End TestCase", "Test Case 6: Verify that cart can be edited Test Failed : ", status ? "PASS" : "FAIL");
             takeScreenshot(driver, "Step Failure", "User Perform Login Failed");
         }

         homePage.navigateToHome();
 
        // TODO: Add "Xtend Smart Watch" to cart
        status = homePage.searchForProduct("Xtend");
        homePage.addProductToCart("Xtend Smart Watch");

        // TODO: Add "Yarine Floor Lamp" to cart
        status = homePage.searchForProduct("Yarine");
         homePage.addProductToCart("Yarine Floor Lamp");

        // update watch quantity to 2
        homePage.changeProductQuantityinCart("Xtend Smart Watch", 2);

        // update table lamp quantity to 0
        homePage.changeProductQuantityinCart("Yarine Floor Lamp", 0);

        // update watch quantity again to 1
        homePage.changeProductQuantityinCart("Xtend Smart Watch", 1);

        homePage.clickCheckout();

        Checkout checkoutPage = new Checkout(driver);
        checkoutPage.addNewAddress("Addr line 1 addr Line 2 addr line 3");
        checkoutPage.selectAddress("Addr line 1 addr Line 2 addr line 3");

        checkoutPage.placeOrder();
        // SLEEP_STMT_06: Wait for place order to succeed and navigate to Thanks page
        //Thread.sleep(3000);
        WebDriverWait wait = new WebDriverWait(driver, 10);
        wait.until(ExpectedConditions.urlContains("thanks"));

        status = driver.getCurrentUrl().endsWith("/thanks");

        homePage.navigateToHome();
        // SLEEP_STMT_07: Wait for page to load
        //Thread.sleep(3000);

        homePage.PerformLogout();

        logStatus("End TestCase", "Test Case 6: Verify that cart can be edited: ", status ? "PASS" : "FAIL");
        takeScreenshot(driver, "End TestCase", "Test Case 6: Verify that cart can be edited: Pass");
        return status;
    }


    public static Boolean TestCase07(RemoteWebDriver driver) throws InterruptedException {
        Boolean status;
        try {
            logStatus("Start TestCase",
                "Test Case 7: Verify that insufficient balance error is thrown when the wallet balance is not enough",
                "DONE");
            takeScreenshot(driver, "Start TestCase", 
                    "Test Case 7: Verify that insufficient balance error is thrown when the wallet balance is not enough");

            Register registration = new Register(driver);
            registration.navigateToRegisterPage();
            status = registration.registerUser("testUser", "abc@123", true);
            if (!status) {
                logStatus("Step Failure", "User Perform Registration Failed", status ? "PASS" : "FAIL");
                logStatus("End TestCase",
                        "Test Case 7: Verify that insufficient balance error is thrown when the wallet balance is not enough: ",
                        status ? "PASS" : "FAIL");
                takeScreenshot(driver, "Step Failure", "User Perform Registration Failed");
                return false;
            }
            lastGeneratedUserName = registration.lastGeneratedUsername;

            Login login = new Login(driver);
            login.navigateToLoginPage();
            status = login.PerformLogin(lastGeneratedUserName, "abc@123");
            if (!status) {
                logStatus("Step Failure", "User Perform Login Failed", status ? "PASS" : "FAIL");
                logStatus("End TestCase",
                        "Test Case 7: Verify that insufficient balance error is thrown when the wallet balance is not enough: ",
                        status ? "PASS" : "FAIL");
                takeScreenshot(driver, "Step Failure", "User Perform Login Failed");
                return false;
            }

            Home homePage = new Home(driver);
            homePage.navigateToHome();
            status = homePage.searchForProduct("Stylecon");
            homePage.addProductToCart("Stylecon 9 Seater RHS Sofa Set");
            // SLEEP_STMT_08: Wait for product to get added to cart
            //Thread.sleep(3000);


            homePage.changeProductQuantityinCart("Stylecon 9 Seater RHS Sofa Set", 10);

            homePage.clickCheckout();

            Checkout checkoutPage = new Checkout(driver);
            checkoutPage.addNewAddress("Addr line 1 addr Line 2 addr line 3");
            checkoutPage.selectAddress("Addr line 1 addr Line 2 addr line 3");

            checkoutPage.placeOrder();
            // SLEEP_STMT_09: Wait for insufficient message to be visible on page
            //Thread.sleep(3000);
            WebDriverWait wait = new WebDriverWait(driver, 10);
            wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath("//div[@id='notistack-snackbar']"))));

            status = checkoutPage.verifyInsufficientBalanceMessage();

            logStatus("End TestCase",
                    "Test Case 7: Verify that insufficient balance error is thrown when the wallet balance is not enough: ",
                    status ? "PASS" : "FAIL");

            takeScreenshot(driver, "End TestCase", 
                    "Test Case 7: Verify that insufficient balance error is thrown when the wallet balance is not enough: "+ status);
            
            return status;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }       
    }

    public static Boolean TestCase08(RemoteWebDriver driver) throws InterruptedException {
        Boolean status = false;
        try {
            // TODO: CRIO_TASK_MODULE_SYNCHRONISATION -
            logStatus("Start TestCase",
            "Test Case 8: In the new tab, the cart should contain the added product: YONEX Smash Badminton Racquet",
            "DONE");
            takeScreenshot(driver, "Start TestCase", 
                    "Test Case 8: Test Case 8: In the new tab, the cart should contain the added product: YONEX Smash Badminton Racquet");

            Register registration = new Register(driver);
            registration.navigateToRegisterPage();
            status = registration.registerUser("testUser", "abc@123", true);
            if (!status) {
                logStatus("Step Failure", "User Perform Registration Failed", status ? "PASS" : "FAIL");
                logStatus("End TestCase",
                        "Test Case 7: Verify that insufficient balance error is thrown when the wallet balance is not enough: ",
                        status ? "PASS" : "FAIL");
                takeScreenshot(driver, "Step Failure", "User Perform Registration Failed");
                return false;
            }
            lastGeneratedUserName = registration.lastGeneratedUsername;

            Login login = new Login(driver);
            login.navigateToLoginPage();
            status = login.PerformLogin(lastGeneratedUserName, "abc@123");
            if (!status) {
                logStatus("Step Failure", "User Perform Login Failed", status ? "PASS" : "FAIL");
                logStatus("End TestCase",
                        "Test Case 7: Verify that insufficient balance error is thrown when the wallet balance is not enough: ",
                        status ? "PASS" : "FAIL");
                takeScreenshot(driver, "Step Failure", "User Perform Login Failed");
                return status;
            }

            Home homePage = new Home(driver);
            homePage.navigateToHome();
            status = homePage.searchForProduct("YONEX Smash Badminton Racquet");
            homePage.addProductToCart("YONEX Smash Badminton Racquet");
            // SLEEP_STMT_08: Wait for product to get added to cart
            //Thread.sleep(3000);

            String parentWindowHandle = driver.getWindowHandle();

            driver.switchTo().newWindow(WindowType.TAB);
            driver.get("https://crio-qkart-frontend-qa.vercel.app/");

            List<String> cartContents = new ArrayList<>();
            cartContents.add("YONEX Smash Badminton Racquet");

            status = homePage.verifyCartContents(cartContents);

            if (!status) {
                logStatus("Step Failure", "Verify Cart contents in new tab", status ? "PASS" : "FAIL");
                logStatus("End TestCase",
                        "Test Case 8: Verify Cart contents in new tab: ",
                        status ? "PASS" : "FAIL");
                takeScreenshot(driver, "End TestCase", "Test Case 8: Verify Cart contents in new tab: Fail");
            } else {
                logStatus("End TestCase",
                        "Test Case 8: Verify Cart contents in new tab: ",
                        status ? "PASS" : "FAIL");
                takeScreenshot(driver, "End TestCase", "Test Case 8: Verify Cart contents in new tab: Pass");
            }

            driver.close();
            driver.switchTo().window(parentWindowHandle);
            homePage.PerformLogout();

            return status;
        } catch (Exception e){
            return false;
        }       
    }

    public static Boolean TestCase09(RemoteWebDriver driver) throws InterruptedException {
        // TODO: CRIO_TASK_MODULE_SYNCHRONISATION -
        Boolean status;
        try {
            logStatus("Start TestCase",
                "Test Case 9: Verify Privacy Policy Content",
                "DONE");
            takeScreenshot(driver, "Start TestCase", 
                    "Test Case 9: Verify Privacy Policy Content");

            Home homePage = new Home(driver);
            homePage.navigateToHome();

            String currentURL = driver.getCurrentUrl();
            String parentWindowHandle = driver.getWindowHandle();

            WebElement privacyPolicyLink = driver.findElement(By.xpath("//a[text()='Privacy policy']"));
            privacyPolicyLink.click();

            String newURL = driver.getCurrentUrl();

            if (currentURL.equals(newURL)){
                logStatus("Test Case 09", "Verify current page URL did not change after click on Privacy Policy Link", "Pass");
            } else {
                logStatus("Test Case 09", "Verify current page URL did not change after click on Privacy Policy Link", "Fail");
                return false;
            }

            Set<String> allWindowHandles = driver.getWindowHandles();
            for (String windowHandle : allWindowHandles){
                if(!windowHandle.equals(parentWindowHandle)){
                    driver.switchTo().window(windowHandle);
                    break;
                }
            }

            WebDriverWait wait = new WebDriverWait(driver, 10);
            wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath("//h2"))));

            WebElement privacyPolicyContent = driver.findElement(By.xpath("//h2"));
            //System.out.println("Privacy policy content : "+ privacyPolicyContent.getText());

            if (privacyPolicyContent.getText().equals("Privacy Policy")){
                logStatus("Test Case 09", "Verify Privacy Policy Content", "Pass");
                takeScreenshot(driver, "Test Case 09", "Verify Privacy Policy Content : Pass");
            } else {
                logStatus("Test Case 09", "Verify Privacy Policy Content", "Fail");
                takeScreenshot(driver, "Test Case 09", "Verify Privacy Policy Content : Fail");
                return false;
            }
            driver.close();
            driver.switchTo().window(parentWindowHandle);

            currentURL = driver.getCurrentUrl();
            //parentWindowHandle = driver.getWindowHandle();

            WebElement termsOfServiceLink = driver.findElement(By.xpath("//a[text()='Terms of Service']"));
            termsOfServiceLink.click();

            //Thread.sleep(3000);

            newURL = driver.getCurrentUrl();

            if (currentURL.equals(newURL)){
                logStatus("Test Case 09", "Verify current page URL did not change after click on Terms of Service Link", "Pass");
            } else {
                logStatus("Test Case 09", "Verify current page URL did not change after click on Terms of Service Link", "Fail");
                return false;
            }

            Set<String> allWindowHandles2 = driver.getWindowHandles();
            for (String windowHandle : allWindowHandles2){
                if(!windowHandle.equals(parentWindowHandle)){
                    driver.switchTo().window(windowHandle);
                    break;
                }
            }

            wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath("//h2"))));
            WebElement termsOfServiceContent = driver.findElement(By.xpath("//h2"));

            //System.out.println("Terms of service content : "+ termsOfServiceContent.getText());

            if (termsOfServiceContent.getText().equals("Terms of Service")){
                logStatus("Test Case 09", "Verify Terms of Service Content", "Pass");
                takeScreenshot(driver, "Test Case 09", "Verify Terms of Service Content : Pass");            
            } else {
                logStatus("Test Case 09", "Verify Terms of Service Content", "Fail");
                takeScreenshot(driver, "Test Case 09", "Verify Terms of Service Content : Fail");
                return false;
            }

            driver.close();
            driver.switchTo().window(parentWindowHandle);
            return true; 
        } catch (Exception e){
            e.printStackTrace();
            return false;
        }
        
    }

    public static Boolean TestCase10(RemoteWebDriver driver) throws InterruptedException {
        Boolean status = false;
        // TODO: CRIO_TASK_MODULE_SYNCHRONISATION -
        
        try{
            logStatus("Start TestCase",
                "Test Case 10: Verify that the Contact us link works fine",
                "DONE");
            takeScreenshot(driver, "Start TestCase", 
                "Test Case 10: Verify that the Contact us link works fine.");

            Home homePage = new Home(driver);
            homePage.navigateToHome();

            WebElement contactUsLink = driver.findElement(By.xpath("//p[text()='Contact us']"));
            contactUsLink.click();

            
            WebDriverWait wait = new WebDriverWait(driver, 10);
            wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[@class='container-fluid']")));
            WebElement contactUsPopUp = driver.findElement(By.xpath("//div[@class='container-fluid']"));

            status = contactUsPopUp.isDisplayed();
            if (status) {
                logStatus("Step status", "Contact us Popup is opened", "Pass");
                takeScreenshot(driver, "Step status", "Contact us Popup is opened");

                driver.findElement(By.xpath("//input[@placeholder='Name']")).sendKeys("crio user");
                driver.findElement(By.xpath("//input[@placeholder='Email']")).sendKeys("criouser@gmail.com");
                driver.findElement(By.xpath("//input[@placeholder='Message']")).sendKeys("Testing the contact us page");
                driver.findElement(By.xpath("//button[text()=' Contact Now']")).click();
            } else {
                logStatus("End Test Case", "Test Case 10: Contact Us Popup is not displayed", status? "Pass": "Fail");
                takeScreenshot(driver, "End Test Case", "Contact Us Popup is not displayed");
                return status;
            }

            //Thread.sleep(2000);
            FluentWait<RemoteWebDriver> wait2 = new FluentWait<RemoteWebDriver>(driver);
            wait2.withTimeout(Duration.ofSeconds(2L));
            wait2.pollingEvery(Duration.ofMillis(250L));
            wait2.ignoring(NoSuchElementException.class);

            status = wait2.until(ExpectedConditions.invisibilityOfElementLocated(By.xpath("//div[@class='container-fluid']")));

            if(status) {
                logStatus("End Test Case", "Test Case 10: Contact Us Popup got closed", "Pass");
                takeScreenshot(driver, "End Test Case", "Test Case 10: Contact Us Popup got closed");
                return true;
            } else {
                logStatus("End Test Case", "Test Case 10: Contact Us Popup not closed", "Fail");
                takeScreenshot(driver, "End Test Case", "Test Case 10: Contact Us Popup not closed : Fail");
                return false; 
            }
            
        } catch (Exception e) {
            logStatus("End Test Case", "Test Case 10: Contact Us Popup not closed", "Fail");
            takeScreenshot(driver, "End Test Case", "Test Case 10: Contact Us Popup not closed : Fail");
            return false; 
        } 
       
    }

    public static Boolean TestCase11(RemoteWebDriver driver) throws InterruptedException {
        Boolean status = false;
        // TODO: CRIO_TASK_MODULE_SYNCHRONISATION -
        try {

            logStatus("Start TestCase", "Test Case 11: Verify that Advertisements displayed correctly", "DONE");
            takeScreenshot(driver, "Start TestCase", "Test Case 5: Verify Happy Flow of buying products");

            // Go to the Register page
            Register registration = new Register(driver);
            registration.navigateToRegisterPage();

            // Register a new user
            status = registration.registerUser("testUser", "abc@123", true);
            if (!status) {
                logStatus("TestCase 5", "Test Case Failure. Happy Flow Test Failed", "FAIL");
                takeScreenshot(driver, "TestCase 5", "Test Case Failure. Happy Flow Test Failed");
            }

            // Save the username of the newly registered user
            lastGeneratedUserName = registration.lastGeneratedUsername;

            // Go to the login page
            Login login = new Login(driver);
            login.navigateToLoginPage();

            // Login with the newly registered user's credentials
            status = login.PerformLogin(lastGeneratedUserName, "abc@123");
            if (!status) {
                logStatus("Step Failure", "User Perform Login Failed", status ? "PASS" : "FAIL");
                logStatus("End TestCase", "Test Case 5: Happy Flow Test Failed : ", status ? "PASS" : "FAIL");
                takeScreenshot(driver, "End TestCase", "Test Case 5: Happy Flow Test Failed");
            }

            // Go to the home page
            Home homePage = new Home(driver);
            homePage.navigateToHome();

            // Find required products by searching and add them to the user's cart
            status = homePage.searchForProduct("Yonex");
            homePage.addProductToCart("YONEX Smash Badminton Racquet");

            // Click on the checkout button
            homePage.clickCheckout();

            // Add a new address on the Checkout page and select it
            Checkout checkoutPage = new Checkout(driver);
            checkoutPage.addNewAddress("Addr line 1 addr Line 2 addr line 3");
            checkoutPage.selectAddress("Addr line 1 addr Line 2 addr line 3");

            // Place the order
            checkoutPage.placeOrder();
            // SLEEP_STMT_04: Wait for place order to succeed and navigate to Thanks page
            //Thread.sleep(3000);

            WebDriverWait wait = new WebDriverWait(driver, 10);
            wait.until(ExpectedConditions.urlContains("thanks"));

            // Check if placing order redirected to the Thansk page
            status = driver.getCurrentUrl().endsWith("/thanks");

            List<WebElement> totalAds = driver.findElements(By.xpath("//iframe"));

            if(totalAds.size() == 3){
                logStatus("Verify 3 Ads displayed", "3 Ads dispalyed on order Success page", "Pass");
            } else {
                logStatus("Verify 3 Ads displayed", "Number of Ads dispalyed on order Success page : "+ totalAds.size(), "Pass");
            }

            
            WebElement firstAd = totalAds.get(0);
                
            driver.switchTo().frame(firstAd).findElement(By.xpath("//button[text()='Buy Now']")).click();
            driver.switchTo().parentFrame();

            if(driver.getCurrentUrl().contains("checkout")){
                status = true;
                logStatus("Verify button on Ads", "Test Case 11 : Buy Now button is clickable", "Pass");
                takeScreenshot(driver, "Verify button on Ads", "Test Case 11 : Buy Now button is clickable");
            } else {
                logStatus("Verify button on Ads", "Test Case 11 : Buy Now button is not clickable", "Fail");
                takeScreenshot(driver, "Verify button on Ads", "Test Case 11 : Buy Now button is not clickable");
                return false;
            }
            driver.navigate().back();
            
            WebElement secondAd = driver.findElements(By.xpath("//iframe")).get(1);
                
            driver.switchTo().frame(secondAd).findElement(By.xpath("//button[text()='Buy Now']")).click();
            driver.switchTo().parentFrame();

            if(driver.getCurrentUrl().contains("checkout")){
                status = true;
                logStatus("Verify button on Ads", "Test Case 11 : Buy Now button is clickable", "Pass");
                takeScreenshot(driver, "Verify button on Ads", "Buy Now button is clickable");
            } else {
                logStatus("Verify button on Ads", "Test Case 11 : Buy Now button is not clickable", "Fail");
                takeScreenshot(driver, "Verify button on Ads", "Buy Now button is not clickable");
                return false;
            }
            driver.navigate().back();
            return true;
        } catch (Exception e){
            e.printStackTrace();
            return false;
        }      
    }

    public static void main(String[] args) throws InterruptedException, MalformedURLException {
        int totalTests = 0;
        int passedTests = 0;
        Boolean status;

        RemoteWebDriver driver = createDriver();

        // Maximize and Implicit Wait for things to initailize
        driver.manage().window().maximize();
        driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);

        try {
            // Execute Test Case 1
            totalTests += 1;
            status = TestCase01(driver);
            if (status) {
                passedTests += 1;
            }

            System.out.println("");

            // Execute Test Case 2
            totalTests += 1;
            status = TestCase02(driver);
            if (status) {
                passedTests += 1;
            }

            System.out.println("");
            
            // Execute Test Case 3
            totalTests += 1;
            status = TestCase03(driver);
            if (status) {
            passedTests += 1;
            }

            System.out.println("");

            // Execute Test Case 4
            totalTests += 1;
            status = TestCase04(driver);
            if (status) {
            passedTests += 1;
            }

            System.out.println("");

            // Execute Test Case 5
            totalTests += 1;
            status = TestCase05(driver);
            if (status) {
            passedTests += 1;
            }

            System.out.println("");

            // // Execute Test Case 6
            totalTests += 1;
            status = TestCase06(driver);
            if (status) {
            passedTests += 1;
            }

            System.out.println("");

            // Execute Test Case 7
            totalTests += 1;
            status = TestCase07(driver);
            if (status) {
            passedTests += 1;
            }

            System.out.println("");


            // Execute Test Case 8
            totalTests += 1;
            status = TestCase08(driver);
            if (status) {
            passedTests += 1;
            }

            System.out.println("");

            // Execute Test Case 9
            totalTests += 1;
            status = TestCase09(driver);
            if (status) {
            passedTests += 1;
            }

            System.out.println("");

            // Execute Test Case 10
            totalTests += 1;
            status = TestCase10(driver);
            if (status) {
            passedTests += 1;
            }

            System.out.println("");

            // Execute Test Case 11
            totalTests += 1;
            status = TestCase11(driver);
            if (status) {
            passedTests += 1;
            }

            System.out.println("");
        } catch (Exception e) {
            throw e;
        } finally {
            // quit Chrome Driver
            driver.quit();

            System.out.println(String.format("%s out of %s test cases Passed ", Integer.toString(passedTests),
                    Integer.toString(totalTests)));
        }

    }
}